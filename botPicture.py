import os
import requests
import io
import discord
from discord.ext import commands
from discord import app_commands
from dotenv import load_dotenv
import threading
from flask import Flask
import time 

# ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
load_dotenv()

# *********** 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables & Constants ***********
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
FREEPIK_API_KEY = os.getenv("FREEPIK_API_KEY")

# üåü PORT ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render Web Service
RENDER_PORT = int(os.getenv("PORT", 8080)) 

# üîí Channel ID ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô 
ALLOWED_CHANNEL_ID = 1424193369646825482 

# *********** 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Discord Bot & Intents ***********
intents = discord.Intents.default()
intents.message_content = True 
bot = commands.Bot(command_prefix=commands.when_mentioned_or(""), intents=intents) 


# *********** 3. Web Server Function (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render Health Check) ***********
app = Flask(__name__)

@app.route('/')
def home():
    """Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ Render ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (Health Check)"""
    return "Discord Bot is running!", 200

def run_web_server():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô Flask Web Server ‡πÉ‡∏ô Thread ‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î Port"""
    print(f"üåê Starting Web Server on port {RENDER_PORT} for Render Health Check...")
    app.run(host='0.0.0.0', port=RENDER_PORT, debug=False, use_reloader=False)


# *********** 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Freepik Mystic API (Asynchronous Polling) ***********

def check_mystic_status(job_id: str):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Polling ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û"""
    url = f"https://api.freepik.com/v1/ai/mystic/{job_id}"
    headers = {
        "x-freepik-api-key": FREEPIK_API_KEY 
    }

    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤ Polling (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    max_wait_time = 60
    start_time = time.time()
    
    while time.time() - start_time < max_wait_time:
        time.sleep(3) # ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        try:
            response = requests.get(url, headers=headers)
            data = response.json()

            if response.status_code == 200:
                status = data.get("data", {}).get("status") # ‡∏î‡∏∂‡∏á status ‡∏à‡∏≤‡∏Å Object "data"
                
                if status == "completed":
                    # üü¢ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                    return data.get("data", {}).get("result", {}).get("image_url")
                elif status == "failed" or status == "cancelled":
                    return None 
            else:
                print(f"Mystic Status Check Error: Status {response.status_code}, Response: {response.text}")
                return None
        except Exception as e:
            print(f"An error occurred during Mystic Status Check: {e}")
            return None
            
    print("Mystic generation timed out after 60 seconds.")
    return None

def generate_mystic_image(prompt: str):
    """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û Mystic ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Polling ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à"""
    url = "https://api.freepik.com/v1/ai/mystic"
    headers = {
        "content-type": "application/json",
        "x-freepik-api-key": FREEPIK_API_KEY 
    }

    payload = {
        "prompt": prompt,
        "resolution": "1k", # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1k ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        "aspect_ratio": "square_1_1", 
        "model": "realism" 
    }
    
    try:
        # 1. ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
        response = requests.post(url, headers=headers, json=payload)
        
        # üü¢ ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á 200 OK ‡πÅ‡∏•‡∏∞ 202 Accepted
        if response.status_code in [200, 202]: 
            # üü¢ ‡∏î‡∏∂‡∏á task_id ‡∏à‡∏≤‡∏Å Object "data" (‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
            job_id = response.json().get("data", {}).get("task_id")
            
            if not job_id:
                print("Mystic failed to return a task_id/job_id.")
                print("Mystic Response Content:", response.text) 
                return None
            
            # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô
            image_url = check_mystic_status(job_id)
            
            if image_url:
                # 3. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                image_response = requests.get(image_url)
                if image_response.status_code == 200:
                    return image_response.content
                
            return None
            
        else:
            # üö® ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î Debug ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤ API Key
            print(f"Mystic Submit Error: Status {response.status_code}")
            print("Mystic Response Content:", response.text) 
            return None
            
    except Exception as e:
        print(f"An error occurred during Mystic API call: {e}")
        return None


# *********** 5. Discord Events ***********
@bot.event
async def on_ready():
    print(f'ü§ñ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß: {bot.user}')
    print(f'üîí ‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Channel ID: {ALLOWED_CHANNEL_ID}')
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ Synced {len(synced)} slash commands.")
    except Exception as e:
        print(f"‚ùå Failed to sync slash commands: {e}")


# *********** 6. Slash Command ***********
@bot.tree.command(name="generate", description="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Prompt ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Freepik Mystic AI")
@app_commands.describe(
    prompt="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)"
)
async def generate_slash(interaction: discord.Interaction, prompt: str):
    
    if interaction.channel_id != ALLOWED_CHANNEL_ID:
        await interaction.response.send_message(
            f"‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á **/generate** ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!",
            ephemeral=True
        )
        return
    
    # üåü ‡πÅ‡∏à‡πâ‡∏á Discord ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Time-out)
    await interaction.response.defer() 

    # üü¢ ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î Debug ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏°‡∏≤‡∏ñ‡∏∂‡∏á API call
    print(f"DEBUG: Starting Mystic API call with prompt: {prompt}")

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Mystic ‡πÉ‡∏ô Thread ‡πÅ‡∏¢‡∏Å
    image_bytes = await bot.loop.run_in_executor(
        None, generate_mystic_image, prompt
    )
    
    if image_bytes:
        image_file = discord.File(io.BytesIO(image_bytes), filename="freepik_mystic_image.jpg")
        
        await interaction.followup.send(
            f"‚úÖ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û Mystic ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ Freepik ‡∏à‡∏≤‡∏Å prompt: **{prompt}**",
            file=image_file
        )
    else:
        # üö® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Log 
        await interaction.followup.send(
            f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏à‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö **Log ‡πÉ‡∏ô Render** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏à‡∏≤‡∏Å Freepik.",
            ephemeral=True
        )

# *********** 7. ‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó ***********
if __name__ == "__main__":
    if not DISCORD_TOKEN or not FREEPIK_API_KEY:
        print("üö® ERROR: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ DISCORD_TOKEN ‡πÅ‡∏•‡∏∞ FREEPIK_API_KEY ‡πÉ‡∏ô Environment Variables")
    else:
        server_thread = threading.Thread(target=run_web_server)
        server_thread.start()
        bot.run(DISCORD_TOKEN)
